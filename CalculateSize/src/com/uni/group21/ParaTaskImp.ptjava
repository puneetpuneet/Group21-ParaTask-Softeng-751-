package com.uni.group21;

import java.io.File;
import pt.runtime.TaskIDGroup;

public class ParaTaskImp {

	private long size;
	private String path;

	public void init() {
		path=new Constant().path;

		long start = System.nanoTime();
		System.out.println("Start time is :  " + start);

		calDriveSize(path);

		long end = System.nanoTime();
		System.out.println("End time is :  " + end);

		long nanoseconds = (end - start)/1000000000;
		System.out.println("Total time taken   : " + nanoseconds +"  seconds");

		System.out.println("Size of the file is :   " + size + "  bytes");
	}

	private void calDriveSize(String path) {
		File drive = new File(path);
		File[] files = drive.listFiles();

		for (File childFile : files) {
			if (childFile.isFile()) {
				updateSize(childFile.length());
			} else if (childFile.isDirectory()) {
				File[] directoryFiles = childFile.listFiles();
				createTaskGroup(directoryFiles);
			}
		}
	}

	TASK public void calDirSize(File dir) {
		if (dir != null) {
			File[] files = dir.listFiles();
			if (files != null) {
				for (File childFile : files) {
					calculateSize(childFile);
				}
			}
		}
	}


	public void calculateSize(File dSize) {
		if (dSize.isFile()) {
			updateSize(dSize.length());
		} else if (dSize.isDirectory()) {
			calDirSize(dSize);
		}
	}

	private void createTaskGroup(File[] directoryFiles) {
		if (directoryFiles != null) {
			int noOfTasks = directoryFiles.length;

			TaskIDGroup<?> group = new TaskIDGroup<TaskID<?>>(noOfTasks);

			for (File childFile : directoryFiles) {
				if (childFile.isFile()) {
					updateSize(childFile.length());
				} else if (childFile.isDirectory()) {
					TaskID<?> taskId = calDirSize(childFile);
					group.add(taskId);
				}
			}

			try {
				group.waitTillFinished();
			} catch (ExecutionException e) {
				e.printStackTrace();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}

	private synchronized void updateSize(long value) {
		size += value;
	}
}